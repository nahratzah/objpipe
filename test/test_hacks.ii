#include <optional>
#include <ostream>
#include <vector>

namespace std {


template<typename T>
inline std::ostream& operator<<(std::ostream& out, const std::optional<T>& opt) {
  if (opt.has_value())
    return out << "optional[" << *opt << "]";
  else
    return out << "empty.optional";
}

template<typename T>
inline std::ostream& operator<<(std::ostream& out, const std::vector<T>& v) {
  bool first = true;
  for (const auto& e : v)
    out << (std::exchange(first, false) ? "[" : ", ") << e;
  return out << "]";
}

template<typename T, typename U>
inline std::ostream& operator<<(std::ostream& out, const std::pair<T, U>& v) {
  return out << "(" << v.first << ", " << v.second << ")";
}


} /* namespace std */
